//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace RouteDisplayer
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace RouteDisplayer.RouteDisplayer_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[43];
            _typeNameTable[0] = "RouteDisplayer.BotNavigationControl";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[2] = "RouteDisplayer.NavigationControl";
            _typeNameTable[3] = "RouteDisplayer.Pages.GetRoutePage";
            _typeNameTable[4] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[5] = "RouteDisplayer.Pages.ListPage";
            _typeNameTable[6] = "RouteDisplayer.NavigationPage";
            _typeNameTable[7] = "RouteDisplayer.Pages.MapPage";
            _typeNameTable[8] = "Esri.ArcGISRuntime.Controls.ViewpointCenter";
            _typeNameTable[9] = "Esri.ArcGISRuntime.Controls.Viewpoint";
            _typeNameTable[10] = "Object";
            _typeNameTable[11] = "Double";
            _typeNameTable[12] = "Int32";
            _typeNameTable[13] = "System.Nullable`1<Double>";
            _typeNameTable[14] = "System.ValueType";
            _typeNameTable[15] = "Esri.ArcGISRuntime.Geometry.Geometry";
            _typeNameTable[16] = "Esri.ArcGISRuntime.Controls.ViewpointExtent";
            _typeNameTable[17] = "Esri.ArcGISRuntime.Symbology.Specialized.MultiLayerSymbol";
            _typeNameTable[18] = "Esri.ArcGISRuntime.Symbology.Symbol";
            _typeNameTable[19] = "Esri.ArcGISRuntime.Symbology.CompositeSymbol";
            _typeNameTable[20] = "Esri.ArcGISRuntime.Symbology.SymbolCollection";
            _typeNameTable[21] = "System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Symbology.Symbol>";
            _typeNameTable[22] = "System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Symbology.Symbol>";
            _typeNameTable[23] = "Esri.ArcGISRuntime.Symbology.PictureFillSymbol";
            _typeNameTable[24] = "Esri.ArcGISRuntime.Symbology.FillSymbol";
            _typeNameTable[25] = "Esri.ArcGISRuntime.Symbology.SimpleLineSymbol";
            _typeNameTable[26] = "Esri.ArcGISRuntime.Symbology.LineSymbol";
            _typeNameTable[27] = "Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol";
            _typeNameTable[28] = "Esri.ArcGISRuntime.Symbology.MarkerSymbol";
            _typeNameTable[29] = "Esri.ArcGISRuntime.Symbology.MarkerAngleAlignment";
            _typeNameTable[30] = "System.Enum";
            _typeNameTable[31] = "Esri.ArcGISRuntime.Symbology.SimpleFillSymbol";
            _typeNameTable[32] = "Windows.UI.Color";
            _typeNameTable[33] = "Esri.ArcGISRuntime.Symbology.SimpleFillStyle";
            _typeNameTable[34] = "Esri.ArcGISRuntime.Symbology.SimpleLineStyle";
            _typeNameTable[35] = "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol";
            _typeNameTable[36] = "Esri.ArcGISRuntime.Symbology.SimpleMarkerStyle";
            _typeNameTable[37] = "Esri.ArcGISRuntime.Symbology.TextSymbol";
            _typeNameTable[38] = "Esri.ArcGISRuntime.Symbology.SymbolFont";
            _typeNameTable[39] = "String";
            _typeNameTable[40] = "Esri.ArcGISRuntime.Symbology.VerticalTextAlignment";
            _typeNameTable[41] = "Esri.ArcGISRuntime.Symbology.HorizontalTextAlignment";
            _typeNameTable[42] = "Boolean";

            _typeTable = new global::System.Type[43];
            _typeTable[0] = typeof(global::RouteDisplayer.BotNavigationControl);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[2] = typeof(global::RouteDisplayer.NavigationControl);
            _typeTable[3] = typeof(global::RouteDisplayer.Pages.GetRoutePage);
            _typeTable[4] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[5] = typeof(global::RouteDisplayer.Pages.ListPage);
            _typeTable[6] = typeof(global::RouteDisplayer.NavigationPage);
            _typeTable[7] = typeof(global::RouteDisplayer.Pages.MapPage);
            _typeTable[8] = typeof(global::Esri.ArcGISRuntime.Controls.ViewpointCenter);
            _typeTable[9] = typeof(global::Esri.ArcGISRuntime.Controls.Viewpoint);
            _typeTable[10] = typeof(global::System.Object);
            _typeTable[11] = typeof(global::System.Double);
            _typeTable[12] = typeof(global::System.Int32);
            _typeTable[13] = typeof(global::System.Nullable<global::System.Double>);
            _typeTable[14] = typeof(global::System.ValueType);
            _typeTable[15] = typeof(global::Esri.ArcGISRuntime.Geometry.Geometry);
            _typeTable[16] = typeof(global::Esri.ArcGISRuntime.Controls.ViewpointExtent);
            _typeTable[17] = typeof(global::Esri.ArcGISRuntime.Symbology.Specialized.MultiLayerSymbol);
            _typeTable[18] = typeof(global::Esri.ArcGISRuntime.Symbology.Symbol);
            _typeTable[19] = typeof(global::Esri.ArcGISRuntime.Symbology.CompositeSymbol);
            _typeTable[20] = typeof(global::Esri.ArcGISRuntime.Symbology.SymbolCollection);
            _typeTable[21] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Symbology.Symbol>);
            _typeTable[22] = typeof(global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Symbology.Symbol>);
            _typeTable[23] = typeof(global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol);
            _typeTable[24] = typeof(global::Esri.ArcGISRuntime.Symbology.FillSymbol);
            _typeTable[25] = typeof(global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol);
            _typeTable[26] = typeof(global::Esri.ArcGISRuntime.Symbology.LineSymbol);
            _typeTable[27] = typeof(global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol);
            _typeTable[28] = typeof(global::Esri.ArcGISRuntime.Symbology.MarkerSymbol);
            _typeTable[29] = typeof(global::Esri.ArcGISRuntime.Symbology.MarkerAngleAlignment);
            _typeTable[30] = typeof(global::System.Enum);
            _typeTable[31] = typeof(global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbol);
            _typeTable[32] = typeof(global::Windows.UI.Color);
            _typeTable[33] = typeof(global::Esri.ArcGISRuntime.Symbology.SimpleFillStyle);
            _typeTable[34] = typeof(global::Esri.ArcGISRuntime.Symbology.SimpleLineStyle);
            _typeTable[35] = typeof(global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol);
            _typeTable[36] = typeof(global::Esri.ArcGISRuntime.Symbology.SimpleMarkerStyle);
            _typeTable[37] = typeof(global::Esri.ArcGISRuntime.Symbology.TextSymbol);
            _typeTable[38] = typeof(global::Esri.ArcGISRuntime.Symbology.SymbolFont);
            _typeTable[39] = typeof(global::System.String);
            _typeTable[40] = typeof(global::Esri.ArcGISRuntime.Symbology.VerticalTextAlignment);
            _typeTable[41] = typeof(global::Esri.ArcGISRuntime.Symbology.HorizontalTextAlignment);
            _typeTable[42] = typeof(global::System.Boolean);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_BotNavigationControl() { return new global::RouteDisplayer.BotNavigationControl(); }
        private object Activate_2_NavigationControl() { return new global::RouteDisplayer.NavigationControl(); }
        private object Activate_3_GetRoutePage() { return new global::RouteDisplayer.Pages.GetRoutePage(); }
        private object Activate_5_ListPage() { return new global::RouteDisplayer.Pages.ListPage(); }
        private object Activate_6_NavigationPage() { return new global::RouteDisplayer.NavigationPage(); }
        private object Activate_7_MapPage() { return new global::RouteDisplayer.Pages.MapPage(); }
        private object Activate_8_ViewpointCenter() { return new global::Esri.ArcGISRuntime.Controls.ViewpointCenter(); }
        private object Activate_16_ViewpointExtent() { return new global::Esri.ArcGISRuntime.Controls.ViewpointExtent(); }
        private object Activate_19_CompositeSymbol() { return new global::Esri.ArcGISRuntime.Symbology.CompositeSymbol(); }
        private object Activate_20_SymbolCollection() { return new global::Esri.ArcGISRuntime.Symbology.SymbolCollection(); }
        private object Activate_21_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Symbology.Symbol>(); }
        private object Activate_22_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Symbology.Symbol>(); }
        private object Activate_23_PictureFillSymbol() { return new global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol(); }
        private object Activate_25_SimpleLineSymbol() { return new global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol(); }
        private object Activate_27_PictureMarkerSymbol() { return new global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol(); }
        private object Activate_31_SimpleFillSymbol() { return new global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbol(); }
        private object Activate_35_SimpleMarkerSymbol() { return new global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol(); }
        private object Activate_37_TextSymbol() { return new global::Esri.ArcGISRuntime.Symbology.TextSymbol(); }
        private object Activate_38_SymbolFont() { return new global::Esri.ArcGISRuntime.Symbology.SymbolFont(); }
        private void VectorAdd_20_SymbolCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Symbology.Symbol>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Symbology.Symbol)item;
            collection.Add(newItem);
        }
        private void VectorAdd_21_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Symbology.Symbol>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Symbology.Symbol)item;
            collection.Add(newItem);
        }
        private void VectorAdd_22_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Symbology.Symbol>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Symbology.Symbol)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  RouteDisplayer.BotNavigationControl
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_0_BotNavigationControl;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  RouteDisplayer.NavigationControl
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_2_NavigationControl;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 3:   //  RouteDisplayer.Pages.GetRoutePage
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_3_GetRoutePage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  RouteDisplayer.Pages.ListPage
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_5_ListPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  RouteDisplayer.NavigationPage
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_6_NavigationPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  RouteDisplayer.Pages.MapPage
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("RouteDisplayer.NavigationPage"));
                userType.Activator = Activate_7_MapPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  Esri.ArcGISRuntime.Controls.ViewpointCenter
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Controls.Viewpoint"));
                userType.Activator = Activate_8_ViewpointCenter;
                userType.AddMemberName("Scale");
                userType.AddMemberName("X");
                userType.AddMemberName("Y");
                userType.AddMemberName("SpatialReferenceID");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 9:   //  Esri.ArcGISRuntime.Controls.Viewpoint
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("TargetScale");
                userType.AddMemberName("TargetGeometry");
                userType.AddMemberName("Rotation");
                xamlType = userType;
                break;

            case 10:   //  Object
                xamlType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  Double
                xamlType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  Int32
                xamlType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  System.Nullable`1<Double>
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 14:   //  System.ValueType
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 15:   //  Esri.ArcGISRuntime.Geometry.Geometry
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 16:   //  Esri.ArcGISRuntime.Controls.ViewpointExtent
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Controls.Viewpoint"));
                userType.Activator = Activate_16_ViewpointExtent;
                userType.AddMemberName("XMin");
                userType.AddMemberName("YMin");
                userType.AddMemberName("XMax");
                userType.AddMemberName("YMax");
                userType.AddMemberName("SpatialReferenceID");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 17:   //  Esri.ArcGISRuntime.Symbology.Specialized.MultiLayerSymbol
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.Symbol"));
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 18:   //  Esri.ArcGISRuntime.Symbology.Symbol
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 19:   //  Esri.ArcGISRuntime.Symbology.CompositeSymbol
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.Symbol"));
                userType.Activator = Activate_19_CompositeSymbol;
                userType.SetContentPropertyName("Esri.ArcGISRuntime.Symbology.CompositeSymbol.Symbols");
                userType.AddMemberName("Symbols");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 20:   //  Esri.ArcGISRuntime.Symbology.SymbolCollection
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Symbology.Symbol>"));
                userType.CollectionAdd = VectorAdd_20_SymbolCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 21:   //  System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Symbology.Symbol>
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Symbology.Symbol>"));
                userType.Activator = Activate_21_ObservableCollection;
                userType.CollectionAdd = VectorAdd_21_ObservableCollection;
                xamlType = userType;
                break;

            case 22:   //  System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Symbology.Symbol>
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_22_Collection;
                userType.CollectionAdd = VectorAdd_22_Collection;
                xamlType = userType;
                break;

            case 23:   //  Esri.ArcGISRuntime.Symbology.PictureFillSymbol
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.FillSymbol"));
                userType.Activator = Activate_23_PictureFillSymbol;
                userType.AddMemberName("Outline");
                userType.AddMemberName("Opacity");
                userType.AddMemberName("Width");
                userType.AddMemberName("Height");
                userType.AddMemberName("Angle");
                userType.AddMemberName("XOffset");
                userType.AddMemberName("YOffset");
                userType.AddMemberName("XScale");
                userType.AddMemberName("YScale");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 24:   //  Esri.ArcGISRuntime.Symbology.FillSymbol
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.Symbol"));
                xamlType = userType;
                break;

            case 25:   //  Esri.ArcGISRuntime.Symbology.SimpleLineSymbol
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.LineSymbol"));
                userType.Activator = Activate_25_SimpleLineSymbol;
                userType.AddMemberName("Width");
                userType.AddMemberName("Color");
                userType.AddMemberName("Style");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 26:   //  Esri.ArcGISRuntime.Symbology.LineSymbol
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.Symbol"));
                xamlType = userType;
                break;

            case 27:   //  Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol"));
                userType.Activator = Activate_27_PictureMarkerSymbol;
                userType.AddMemberName("Width");
                userType.AddMemberName("Height");
                userType.AddMemberName("AngleAlignment");
                userType.AddMemberName("Angle");
                userType.AddMemberName("Opacity");
                userType.AddMemberName("XOffset");
                userType.AddMemberName("YOffset");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 28:   //  Esri.ArcGISRuntime.Symbology.MarkerSymbol
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.Symbol"));
                xamlType = userType;
                break;

            case 29:   //  Esri.ArcGISRuntime.Symbology.MarkerAngleAlignment
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Screen", global::Esri.ArcGISRuntime.Symbology.MarkerAngleAlignment.Screen);
                userType.AddEnumValue("Map", global::Esri.ArcGISRuntime.Symbology.MarkerAngleAlignment.Map);
                xamlType = userType;
                break;

            case 30:   //  System.Enum
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 31:   //  Esri.ArcGISRuntime.Symbology.SimpleFillSymbol
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.FillSymbol"));
                userType.Activator = Activate_31_SimpleFillSymbol;
                userType.AddMemberName("Outline");
                userType.AddMemberName("Color");
                userType.AddMemberName("Style");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 32:   //  Windows.UI.Color
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 33:   //  Esri.ArcGISRuntime.Symbology.SimpleFillStyle
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("BackwardDiagonal", global::Esri.ArcGISRuntime.Symbology.SimpleFillStyle.BackwardDiagonal);
                userType.AddEnumValue("Cross", global::Esri.ArcGISRuntime.Symbology.SimpleFillStyle.Cross);
                userType.AddEnumValue("DiagonalCross", global::Esri.ArcGISRuntime.Symbology.SimpleFillStyle.DiagonalCross);
                userType.AddEnumValue("ForwardDiagonal", global::Esri.ArcGISRuntime.Symbology.SimpleFillStyle.ForwardDiagonal);
                userType.AddEnumValue("Horizontal", global::Esri.ArcGISRuntime.Symbology.SimpleFillStyle.Horizontal);
                userType.AddEnumValue("Null", global::Esri.ArcGISRuntime.Symbology.SimpleFillStyle.Null);
                userType.AddEnumValue("Solid", global::Esri.ArcGISRuntime.Symbology.SimpleFillStyle.Solid);
                userType.AddEnumValue("Vertical", global::Esri.ArcGISRuntime.Symbology.SimpleFillStyle.Vertical);
                xamlType = userType;
                break;

            case 34:   //  Esri.ArcGISRuntime.Symbology.SimpleLineStyle
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Dash", global::Esri.ArcGISRuntime.Symbology.SimpleLineStyle.Dash);
                userType.AddEnumValue("DashDot", global::Esri.ArcGISRuntime.Symbology.SimpleLineStyle.DashDot);
                userType.AddEnumValue("DashDotDot", global::Esri.ArcGISRuntime.Symbology.SimpleLineStyle.DashDotDot);
                userType.AddEnumValue("Dot", global::Esri.ArcGISRuntime.Symbology.SimpleLineStyle.Dot);
                userType.AddEnumValue("Null", global::Esri.ArcGISRuntime.Symbology.SimpleLineStyle.Null);
                userType.AddEnumValue("Solid", global::Esri.ArcGISRuntime.Symbology.SimpleLineStyle.Solid);
                xamlType = userType;
                break;

            case 35:   //  Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol"));
                userType.Activator = Activate_35_SimpleMarkerSymbol;
                userType.AddMemberName("Outline");
                userType.AddMemberName("Size");
                userType.AddMemberName("Color");
                userType.AddMemberName("Style");
                userType.AddMemberName("Angle");
                userType.AddMemberName("XOffset");
                userType.AddMemberName("YOffset");
                userType.AddMemberName("AngleAlignment");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 36:   //  Esri.ArcGISRuntime.Symbology.SimpleMarkerStyle
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Circle", global::Esri.ArcGISRuntime.Symbology.SimpleMarkerStyle.Circle);
                userType.AddEnumValue("Cross", global::Esri.ArcGISRuntime.Symbology.SimpleMarkerStyle.Cross);
                userType.AddEnumValue("Diamond", global::Esri.ArcGISRuntime.Symbology.SimpleMarkerStyle.Diamond);
                userType.AddEnumValue("Square", global::Esri.ArcGISRuntime.Symbology.SimpleMarkerStyle.Square);
                userType.AddEnumValue("X", global::Esri.ArcGISRuntime.Symbology.SimpleMarkerStyle.X);
                userType.AddEnumValue("Triangle", global::Esri.ArcGISRuntime.Symbology.SimpleMarkerStyle.Triangle);
                xamlType = userType;
                break;

            case 37:   //  Esri.ArcGISRuntime.Symbology.TextSymbol
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol"));
                userType.Activator = Activate_37_TextSymbol;
                userType.SetContentPropertyName("Esri.ArcGISRuntime.Symbology.TextSymbol.Font");
                userType.AddMemberName("Font");
                userType.AddMemberName("Text");
                userType.AddMemberName("Color");
                userType.AddMemberName("BackgroundColor");
                userType.AddMemberName("BorderLineColor");
                userType.AddMemberName("BorderLineSize");
                userType.AddMemberName("VerticalTextAlignment");
                userType.AddMemberName("HorizontalTextAlignment");
                userType.AddMemberName("Angle");
                userType.AddMemberName("XOffset");
                userType.AddMemberName("YOffset");
                userType.AddMemberName("AngleAlignment");
                userType.AddMemberName("IsRightToLeft");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 38:   //  Esri.ArcGISRuntime.Symbology.SymbolFont
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 39:   //  String
                xamlType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 40:   //  Esri.ArcGISRuntime.Symbology.VerticalTextAlignment
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Bottom", global::Esri.ArcGISRuntime.Symbology.VerticalTextAlignment.Bottom);
                userType.AddEnumValue("Middle", global::Esri.ArcGISRuntime.Symbology.VerticalTextAlignment.Middle);
                userType.AddEnumValue("Top", global::Esri.ArcGISRuntime.Symbology.VerticalTextAlignment.Top);
                userType.AddEnumValue("Baseline", global::Esri.ArcGISRuntime.Symbology.VerticalTextAlignment.Baseline);
                xamlType = userType;
                break;

            case 41:   //  Esri.ArcGISRuntime.Symbology.HorizontalTextAlignment
                userType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Left", global::Esri.ArcGISRuntime.Symbology.HorizontalTextAlignment.Left);
                userType.AddEnumValue("Center", global::Esri.ArcGISRuntime.Symbology.HorizontalTextAlignment.Center);
                userType.AddEnumValue("Right", global::Esri.ArcGISRuntime.Symbology.HorizontalTextAlignment.Right);
                userType.AddEnumValue("Justify", global::Esri.ArcGISRuntime.Symbology.HorizontalTextAlignment.Justify);
                xamlType = userType;
                break;

            case 42:   //  Boolean
                xamlType = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Esri.ArcGISRuntime.Metadata.XamlMetadataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Esri.ArcGISRuntime.Esri_ArcGISRuntime_WindowsPhone_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_ViewpointCenter_Scale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointCenter)instance;
            return that.Scale;
        }
        private void set_0_ViewpointCenter_Scale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointCenter)instance;
            that.Scale = (global::System.Double)Value;
        }
        private object get_1_ViewpointCenter_X(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointCenter)instance;
            return that.X;
        }
        private void set_1_ViewpointCenter_X(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointCenter)instance;
            that.X = (global::System.Double)Value;
        }
        private object get_2_ViewpointCenter_Y(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointCenter)instance;
            return that.Y;
        }
        private void set_2_ViewpointCenter_Y(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointCenter)instance;
            that.Y = (global::System.Double)Value;
        }
        private object get_3_ViewpointCenter_SpatialReferenceID(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointCenter)instance;
            return that.SpatialReferenceID;
        }
        private void set_3_ViewpointCenter_SpatialReferenceID(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointCenter)instance;
            that.SpatialReferenceID = (global::System.Int32)Value;
        }
        private object get_4_Viewpoint_TargetScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Viewpoint)instance;
            return that.TargetScale;
        }
        private object get_5_Viewpoint_TargetGeometry(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Viewpoint)instance;
            return that.TargetGeometry;
        }
        private object get_6_Viewpoint_Rotation(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Viewpoint)instance;
            return that.Rotation;
        }
        private void set_6_Viewpoint_Rotation(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Viewpoint)instance;
            that.Rotation = (global::System.Double)Value;
        }
        private object get_7_ViewpointExtent_XMin(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointExtent)instance;
            return that.XMin;
        }
        private void set_7_ViewpointExtent_XMin(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointExtent)instance;
            that.XMin = (global::System.Double)Value;
        }
        private object get_8_ViewpointExtent_YMin(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointExtent)instance;
            return that.YMin;
        }
        private void set_8_ViewpointExtent_YMin(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointExtent)instance;
            that.YMin = (global::System.Double)Value;
        }
        private object get_9_ViewpointExtent_XMax(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointExtent)instance;
            return that.XMax;
        }
        private void set_9_ViewpointExtent_XMax(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointExtent)instance;
            that.XMax = (global::System.Double)Value;
        }
        private object get_10_ViewpointExtent_YMax(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointExtent)instance;
            return that.YMax;
        }
        private void set_10_ViewpointExtent_YMax(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointExtent)instance;
            that.YMax = (global::System.Double)Value;
        }
        private object get_11_ViewpointExtent_SpatialReferenceID(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointExtent)instance;
            return that.SpatialReferenceID;
        }
        private void set_11_ViewpointExtent_SpatialReferenceID(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointExtent)instance;
            that.SpatialReferenceID = (global::System.Int32)Value;
        }
        private object get_12_CompositeSymbol_Symbols(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.CompositeSymbol)instance;
            return that.Symbols;
        }
        private void set_12_CompositeSymbol_Symbols(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.CompositeSymbol)instance;
            that.Symbols = (global::Esri.ArcGISRuntime.Symbology.SymbolCollection)Value;
        }
        private object get_13_PictureFillSymbol_Outline(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.Outline;
        }
        private void set_13_PictureFillSymbol_Outline(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.Outline = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)Value;
        }
        private object get_14_PictureFillSymbol_Opacity(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.Opacity;
        }
        private void set_14_PictureFillSymbol_Opacity(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.Opacity = (global::System.Double)Value;
        }
        private object get_15_PictureFillSymbol_Width(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.Width;
        }
        private void set_15_PictureFillSymbol_Width(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_16_PictureFillSymbol_Height(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.Height;
        }
        private void set_16_PictureFillSymbol_Height(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.Height = (global::System.Double)Value;
        }
        private object get_17_PictureFillSymbol_Angle(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.Angle;
        }
        private void set_17_PictureFillSymbol_Angle(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.Angle = (global::System.Double)Value;
        }
        private object get_18_PictureFillSymbol_XOffset(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.XOffset;
        }
        private void set_18_PictureFillSymbol_XOffset(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.XOffset = (global::System.Double)Value;
        }
        private object get_19_PictureFillSymbol_YOffset(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.YOffset;
        }
        private void set_19_PictureFillSymbol_YOffset(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.YOffset = (global::System.Double)Value;
        }
        private object get_20_PictureFillSymbol_XScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.XScale;
        }
        private void set_20_PictureFillSymbol_XScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.XScale = (global::System.Double)Value;
        }
        private object get_21_PictureFillSymbol_YScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.YScale;
        }
        private void set_21_PictureFillSymbol_YScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.YScale = (global::System.Double)Value;
        }
        private object get_22_PictureMarkerSymbol_Width(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            return that.Width;
        }
        private void set_22_PictureMarkerSymbol_Width(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_23_PictureMarkerSymbol_Height(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            return that.Height;
        }
        private void set_23_PictureMarkerSymbol_Height(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            that.Height = (global::System.Double)Value;
        }
        private object get_24_PictureMarkerSymbol_AngleAlignment(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            return that.AngleAlignment;
        }
        private void set_24_PictureMarkerSymbol_AngleAlignment(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            that.AngleAlignment = (global::Esri.ArcGISRuntime.Symbology.MarkerAngleAlignment)Value;
        }
        private object get_25_PictureMarkerSymbol_Angle(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            return that.Angle;
        }
        private void set_25_PictureMarkerSymbol_Angle(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            that.Angle = (global::System.Double)Value;
        }
        private object get_26_PictureMarkerSymbol_Opacity(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            return that.Opacity;
        }
        private void set_26_PictureMarkerSymbol_Opacity(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            that.Opacity = (global::System.Double)Value;
        }
        private object get_27_PictureMarkerSymbol_XOffset(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            return that.XOffset;
        }
        private void set_27_PictureMarkerSymbol_XOffset(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            that.XOffset = (global::System.Double)Value;
        }
        private object get_28_PictureMarkerSymbol_YOffset(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            return that.YOffset;
        }
        private void set_28_PictureMarkerSymbol_YOffset(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            that.YOffset = (global::System.Double)Value;
        }
        private object get_29_SimpleFillSymbol_Outline(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbol)instance;
            return that.Outline;
        }
        private void set_29_SimpleFillSymbol_Outline(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbol)instance;
            that.Outline = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)Value;
        }
        private object get_30_SimpleFillSymbol_Color(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbol)instance;
            return that.Color;
        }
        private void set_30_SimpleFillSymbol_Color(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbol)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_31_SimpleFillSymbol_Style(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbol)instance;
            return that.Style;
        }
        private void set_31_SimpleFillSymbol_Style(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbol)instance;
            that.Style = (global::Esri.ArcGISRuntime.Symbology.SimpleFillStyle)Value;
        }
        private object get_32_SimpleLineSymbol_Width(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)instance;
            return that.Width;
        }
        private void set_32_SimpleLineSymbol_Width(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_33_SimpleLineSymbol_Color(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)instance;
            return that.Color;
        }
        private void set_33_SimpleLineSymbol_Color(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_34_SimpleLineSymbol_Style(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)instance;
            return that.Style;
        }
        private void set_34_SimpleLineSymbol_Style(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)instance;
            that.Style = (global::Esri.ArcGISRuntime.Symbology.SimpleLineStyle)Value;
        }
        private object get_35_SimpleMarkerSymbol_Outline(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            return that.Outline;
        }
        private void set_35_SimpleMarkerSymbol_Outline(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            that.Outline = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)Value;
        }
        private object get_36_SimpleMarkerSymbol_Size(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            return that.Size;
        }
        private void set_36_SimpleMarkerSymbol_Size(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            that.Size = (global::System.Double)Value;
        }
        private object get_37_SimpleMarkerSymbol_Color(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            return that.Color;
        }
        private void set_37_SimpleMarkerSymbol_Color(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_38_SimpleMarkerSymbol_Style(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            return that.Style;
        }
        private void set_38_SimpleMarkerSymbol_Style(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            that.Style = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerStyle)Value;
        }
        private object get_39_SimpleMarkerSymbol_Angle(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            return that.Angle;
        }
        private void set_39_SimpleMarkerSymbol_Angle(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            that.Angle = (global::System.Double)Value;
        }
        private object get_40_SimpleMarkerSymbol_XOffset(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            return that.XOffset;
        }
        private void set_40_SimpleMarkerSymbol_XOffset(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            that.XOffset = (global::System.Double)Value;
        }
        private object get_41_SimpleMarkerSymbol_YOffset(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            return that.YOffset;
        }
        private void set_41_SimpleMarkerSymbol_YOffset(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            that.YOffset = (global::System.Double)Value;
        }
        private object get_42_SimpleMarkerSymbol_AngleAlignment(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            return that.AngleAlignment;
        }
        private void set_42_SimpleMarkerSymbol_AngleAlignment(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            that.AngleAlignment = (global::Esri.ArcGISRuntime.Symbology.MarkerAngleAlignment)Value;
        }
        private object get_43_TextSymbol_Font(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.Font;
        }
        private void set_43_TextSymbol_Font(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.Font = (global::Esri.ArcGISRuntime.Symbology.SymbolFont)Value;
        }
        private object get_44_TextSymbol_Text(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.Text;
        }
        private void set_44_TextSymbol_Text(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_45_TextSymbol_Color(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.Color;
        }
        private void set_45_TextSymbol_Color(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_46_TextSymbol_BackgroundColor(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.BackgroundColor;
        }
        private void set_46_TextSymbol_BackgroundColor(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.BackgroundColor = (global::Windows.UI.Color)Value;
        }
        private object get_47_TextSymbol_BorderLineColor(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.BorderLineColor;
        }
        private void set_47_TextSymbol_BorderLineColor(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.BorderLineColor = (global::Windows.UI.Color)Value;
        }
        private object get_48_TextSymbol_BorderLineSize(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.BorderLineSize;
        }
        private void set_48_TextSymbol_BorderLineSize(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.BorderLineSize = (global::System.Double)Value;
        }
        private object get_49_TextSymbol_VerticalTextAlignment(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.VerticalTextAlignment;
        }
        private void set_49_TextSymbol_VerticalTextAlignment(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.VerticalTextAlignment = (global::Esri.ArcGISRuntime.Symbology.VerticalTextAlignment)Value;
        }
        private object get_50_TextSymbol_HorizontalTextAlignment(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.HorizontalTextAlignment;
        }
        private void set_50_TextSymbol_HorizontalTextAlignment(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.HorizontalTextAlignment = (global::Esri.ArcGISRuntime.Symbology.HorizontalTextAlignment)Value;
        }
        private object get_51_TextSymbol_Angle(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.Angle;
        }
        private void set_51_TextSymbol_Angle(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.Angle = (global::System.Double)Value;
        }
        private object get_52_TextSymbol_XOffset(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.XOffset;
        }
        private void set_52_TextSymbol_XOffset(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.XOffset = (global::System.Double)Value;
        }
        private object get_53_TextSymbol_YOffset(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.YOffset;
        }
        private void set_53_TextSymbol_YOffset(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.YOffset = (global::System.Double)Value;
        }
        private object get_54_TextSymbol_AngleAlignment(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.AngleAlignment;
        }
        private void set_54_TextSymbol_AngleAlignment(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.AngleAlignment = (global::Esri.ArcGISRuntime.Symbology.MarkerAngleAlignment)Value;
        }
        private object get_55_TextSymbol_IsRightToLeft(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.IsRightToLeft;
        }
        private void set_55_TextSymbol_IsRightToLeft(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.IsRightToLeft = (global::System.Boolean)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember xamlMember = null;
            global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Esri.ArcGISRuntime.Controls.ViewpointCenter.Scale":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewpointCenter");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Scale", "Double");
                xamlMember.Getter = get_0_ViewpointCenter_Scale;
                xamlMember.Setter = set_0_ViewpointCenter_Scale;
                break;
            case "Esri.ArcGISRuntime.Controls.ViewpointCenter.X":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewpointCenter");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "X", "Double");
                xamlMember.Getter = get_1_ViewpointCenter_X;
                xamlMember.Setter = set_1_ViewpointCenter_X;
                break;
            case "Esri.ArcGISRuntime.Controls.ViewpointCenter.Y":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewpointCenter");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Y", "Double");
                xamlMember.Getter = get_2_ViewpointCenter_Y;
                xamlMember.Setter = set_2_ViewpointCenter_Y;
                break;
            case "Esri.ArcGISRuntime.Controls.ViewpointCenter.SpatialReferenceID":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewpointCenter");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "SpatialReferenceID", "Int32");
                xamlMember.Getter = get_3_ViewpointCenter_SpatialReferenceID;
                xamlMember.Setter = set_3_ViewpointCenter_SpatialReferenceID;
                break;
            case "Esri.ArcGISRuntime.Controls.Viewpoint.TargetScale":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.Viewpoint");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "TargetScale", "System.Nullable`1<Double>");
                xamlMember.Getter = get_4_Viewpoint_TargetScale;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Controls.Viewpoint.TargetGeometry":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.Viewpoint");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "TargetGeometry", "Esri.ArcGISRuntime.Geometry.Geometry");
                xamlMember.Getter = get_5_Viewpoint_TargetGeometry;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Controls.Viewpoint.Rotation":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.Viewpoint");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Rotation", "Double");
                xamlMember.Getter = get_6_Viewpoint_Rotation;
                xamlMember.Setter = set_6_Viewpoint_Rotation;
                break;
            case "Esri.ArcGISRuntime.Controls.ViewpointExtent.XMin":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewpointExtent");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "XMin", "Double");
                xamlMember.Getter = get_7_ViewpointExtent_XMin;
                xamlMember.Setter = set_7_ViewpointExtent_XMin;
                break;
            case "Esri.ArcGISRuntime.Controls.ViewpointExtent.YMin":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewpointExtent");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "YMin", "Double");
                xamlMember.Getter = get_8_ViewpointExtent_YMin;
                xamlMember.Setter = set_8_ViewpointExtent_YMin;
                break;
            case "Esri.ArcGISRuntime.Controls.ViewpointExtent.XMax":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewpointExtent");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "XMax", "Double");
                xamlMember.Getter = get_9_ViewpointExtent_XMax;
                xamlMember.Setter = set_9_ViewpointExtent_XMax;
                break;
            case "Esri.ArcGISRuntime.Controls.ViewpointExtent.YMax":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewpointExtent");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "YMax", "Double");
                xamlMember.Getter = get_10_ViewpointExtent_YMax;
                xamlMember.Setter = set_10_ViewpointExtent_YMax;
                break;
            case "Esri.ArcGISRuntime.Controls.ViewpointExtent.SpatialReferenceID":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewpointExtent");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "SpatialReferenceID", "Int32");
                xamlMember.Getter = get_11_ViewpointExtent_SpatialReferenceID;
                xamlMember.Setter = set_11_ViewpointExtent_SpatialReferenceID;
                break;
            case "Esri.ArcGISRuntime.Symbology.CompositeSymbol.Symbols":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.CompositeSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Symbols", "Esri.ArcGISRuntime.Symbology.SymbolCollection");
                xamlMember.Getter = get_12_CompositeSymbol_Symbols;
                xamlMember.Setter = set_12_CompositeSymbol_Symbols;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.Outline":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Outline", "Esri.ArcGISRuntime.Symbology.SimpleLineSymbol");
                xamlMember.Getter = get_13_PictureFillSymbol_Outline;
                xamlMember.Setter = set_13_PictureFillSymbol_Outline;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.Opacity":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Opacity", "Double");
                xamlMember.Getter = get_14_PictureFillSymbol_Opacity;
                xamlMember.Setter = set_14_PictureFillSymbol_Opacity;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.Width":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.Getter = get_15_PictureFillSymbol_Width;
                xamlMember.Setter = set_15_PictureFillSymbol_Width;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.Height":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Height", "Double");
                xamlMember.Getter = get_16_PictureFillSymbol_Height;
                xamlMember.Setter = set_16_PictureFillSymbol_Height;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.Angle":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Angle", "Double");
                xamlMember.Getter = get_17_PictureFillSymbol_Angle;
                xamlMember.Setter = set_17_PictureFillSymbol_Angle;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.XOffset":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "XOffset", "Double");
                xamlMember.Getter = get_18_PictureFillSymbol_XOffset;
                xamlMember.Setter = set_18_PictureFillSymbol_XOffset;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.YOffset":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "YOffset", "Double");
                xamlMember.Getter = get_19_PictureFillSymbol_YOffset;
                xamlMember.Setter = set_19_PictureFillSymbol_YOffset;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.XScale":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "XScale", "Double");
                xamlMember.Getter = get_20_PictureFillSymbol_XScale;
                xamlMember.Setter = set_20_PictureFillSymbol_XScale;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.YScale":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "YScale", "Double");
                xamlMember.Getter = get_21_PictureFillSymbol_YScale;
                xamlMember.Setter = set_21_PictureFillSymbol_YScale;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.Width":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.Getter = get_22_PictureMarkerSymbol_Width;
                xamlMember.Setter = set_22_PictureMarkerSymbol_Width;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.Height":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Height", "Double");
                xamlMember.Getter = get_23_PictureMarkerSymbol_Height;
                xamlMember.Setter = set_23_PictureMarkerSymbol_Height;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.AngleAlignment":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "AngleAlignment", "Esri.ArcGISRuntime.Symbology.MarkerAngleAlignment");
                xamlMember.Getter = get_24_PictureMarkerSymbol_AngleAlignment;
                xamlMember.Setter = set_24_PictureMarkerSymbol_AngleAlignment;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.Angle":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Angle", "Double");
                xamlMember.Getter = get_25_PictureMarkerSymbol_Angle;
                xamlMember.Setter = set_25_PictureMarkerSymbol_Angle;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.Opacity":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Opacity", "Double");
                xamlMember.Getter = get_26_PictureMarkerSymbol_Opacity;
                xamlMember.Setter = set_26_PictureMarkerSymbol_Opacity;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.XOffset":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "XOffset", "Double");
                xamlMember.Getter = get_27_PictureMarkerSymbol_XOffset;
                xamlMember.Setter = set_27_PictureMarkerSymbol_XOffset;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.YOffset":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "YOffset", "Double");
                xamlMember.Getter = get_28_PictureMarkerSymbol_YOffset;
                xamlMember.Setter = set_28_PictureMarkerSymbol_YOffset;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleFillSymbol.Outline":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleFillSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Outline", "Esri.ArcGISRuntime.Symbology.SimpleLineSymbol");
                xamlMember.Getter = get_29_SimpleFillSymbol_Outline;
                xamlMember.Setter = set_29_SimpleFillSymbol_Outline;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleFillSymbol.Color":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleFillSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.Getter = get_30_SimpleFillSymbol_Color;
                xamlMember.Setter = set_30_SimpleFillSymbol_Color;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleFillSymbol.Style":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleFillSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Style", "Esri.ArcGISRuntime.Symbology.SimpleFillStyle");
                xamlMember.Getter = get_31_SimpleFillSymbol_Style;
                xamlMember.Setter = set_31_SimpleFillSymbol_Style;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleLineSymbol.Width":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleLineSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.Getter = get_32_SimpleLineSymbol_Width;
                xamlMember.Setter = set_32_SimpleLineSymbol_Width;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleLineSymbol.Color":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleLineSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.Getter = get_33_SimpleLineSymbol_Color;
                xamlMember.Setter = set_33_SimpleLineSymbol_Color;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleLineSymbol.Style":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleLineSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Style", "Esri.ArcGISRuntime.Symbology.SimpleLineStyle");
                xamlMember.Getter = get_34_SimpleLineSymbol_Style;
                xamlMember.Setter = set_34_SimpleLineSymbol_Style;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.Outline":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Outline", "Esri.ArcGISRuntime.Symbology.SimpleLineSymbol");
                xamlMember.Getter = get_35_SimpleMarkerSymbol_Outline;
                xamlMember.Setter = set_35_SimpleMarkerSymbol_Outline;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.Size":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Size", "Double");
                xamlMember.Getter = get_36_SimpleMarkerSymbol_Size;
                xamlMember.Setter = set_36_SimpleMarkerSymbol_Size;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.Color":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.Getter = get_37_SimpleMarkerSymbol_Color;
                xamlMember.Setter = set_37_SimpleMarkerSymbol_Color;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.Style":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Style", "Esri.ArcGISRuntime.Symbology.SimpleMarkerStyle");
                xamlMember.Getter = get_38_SimpleMarkerSymbol_Style;
                xamlMember.Setter = set_38_SimpleMarkerSymbol_Style;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.Angle":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Angle", "Double");
                xamlMember.Getter = get_39_SimpleMarkerSymbol_Angle;
                xamlMember.Setter = set_39_SimpleMarkerSymbol_Angle;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.XOffset":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "XOffset", "Double");
                xamlMember.Getter = get_40_SimpleMarkerSymbol_XOffset;
                xamlMember.Setter = set_40_SimpleMarkerSymbol_XOffset;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.YOffset":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "YOffset", "Double");
                xamlMember.Getter = get_41_SimpleMarkerSymbol_YOffset;
                xamlMember.Setter = set_41_SimpleMarkerSymbol_YOffset;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.AngleAlignment":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "AngleAlignment", "Esri.ArcGISRuntime.Symbology.MarkerAngleAlignment");
                xamlMember.Getter = get_42_SimpleMarkerSymbol_AngleAlignment;
                xamlMember.Setter = set_42_SimpleMarkerSymbol_AngleAlignment;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.Font":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Font", "Esri.ArcGISRuntime.Symbology.SymbolFont");
                xamlMember.Getter = get_43_TextSymbol_Font;
                xamlMember.Setter = set_43_TextSymbol_Font;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.Text":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.Getter = get_44_TextSymbol_Text;
                xamlMember.Setter = set_44_TextSymbol_Text;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.Color":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.Getter = get_45_TextSymbol_Color;
                xamlMember.Setter = set_45_TextSymbol_Color;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.BackgroundColor":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "BackgroundColor", "Windows.UI.Color");
                xamlMember.Getter = get_46_TextSymbol_BackgroundColor;
                xamlMember.Setter = set_46_TextSymbol_BackgroundColor;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.BorderLineColor":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "BorderLineColor", "Windows.UI.Color");
                xamlMember.Getter = get_47_TextSymbol_BorderLineColor;
                xamlMember.Setter = set_47_TextSymbol_BorderLineColor;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.BorderLineSize":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "BorderLineSize", "Double");
                xamlMember.Getter = get_48_TextSymbol_BorderLineSize;
                xamlMember.Setter = set_48_TextSymbol_BorderLineSize;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.VerticalTextAlignment":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "VerticalTextAlignment", "Esri.ArcGISRuntime.Symbology.VerticalTextAlignment");
                xamlMember.Getter = get_49_TextSymbol_VerticalTextAlignment;
                xamlMember.Setter = set_49_TextSymbol_VerticalTextAlignment;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.HorizontalTextAlignment":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "HorizontalTextAlignment", "Esri.ArcGISRuntime.Symbology.HorizontalTextAlignment");
                xamlMember.Getter = get_50_TextSymbol_HorizontalTextAlignment;
                xamlMember.Setter = set_50_TextSymbol_HorizontalTextAlignment;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.Angle":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "Angle", "Double");
                xamlMember.Getter = get_51_TextSymbol_Angle;
                xamlMember.Setter = set_51_TextSymbol_Angle;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.XOffset":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "XOffset", "Double");
                xamlMember.Getter = get_52_TextSymbol_XOffset;
                xamlMember.Setter = set_52_TextSymbol_XOffset;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.YOffset":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "YOffset", "Double");
                xamlMember.Getter = get_53_TextSymbol_YOffset;
                xamlMember.Setter = set_53_TextSymbol_YOffset;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.AngleAlignment":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "AngleAlignment", "Esri.ArcGISRuntime.Symbology.MarkerAngleAlignment");
                xamlMember.Getter = get_54_TextSymbol_AngleAlignment;
                xamlMember.Setter = set_54_TextSymbol_AngleAlignment;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.IsRightToLeft":
                userType = (global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlMember(this, "IsRightToLeft", "Boolean");
                xamlMember.Getter = get_55_TextSymbol_IsRightToLeft;
                xamlMember.Setter = set_55_TextSymbol_IsRightToLeft;
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlSystemBaseType
    {
        global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::RouteDisplayer.RouteDisplayer_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


